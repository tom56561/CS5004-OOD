package lab02;

import static org.junit.Assert.assertEquals;

import java.util.Random;

import org.junit.Test;

public class FibonacciCounterTest {

  @Test
  public void testGetFibonacciNumber() {
    FibonacciCounter fib;
    assertEquals(0, new FibonacciCounter(0).getFibonacciNumber());
    assertEquals(1, new FibonacciCounter(1).getFibonacciNumber());

    int fibValue = 1;
    int prevFibValue = 0;
    for (int test = 2; test < 46; test++) {
      fib = new FibonacciCounter(test);

      int temp = fibValue;
      fibValue = fibValue + prevFibValue;
      prevFibValue = temp;

      assertEquals("Fail for a counter of " + test, fibValue, fib.getFibonacciNumber());
    }
  }

  @Test
  public void testIncrementedBy1() {
    FibonacciCounter fib;
    assertEquals(1, new FibonacciCounter(0).incrementedBy1().getFibonacciNumber());
    assertEquals(1, new FibonacciCounter(1).incrementedBy1().getFibonacciNumber());

    int fibValue = 1;
    int prevFibValue = 0;
    for (int test = 2; test < 47; test++) {
      fib = new FibonacciCounter(test - 1);

      int temp = fibValue;
      fibValue = fibValue + prevFibValue;
      prevFibValue = temp;

      assertEquals("Fail for a counter of " + test, fibValue,
          fib.incrementedBy1().getFibonacciNumber());
    }
  }

  @Test
  public void testDecrementedBy1() {
    FibonacciCounter fib;
    assertEquals(0, new FibonacciCounter(0).decrementedBy1().getFibonacciNumber());
    assertEquals(0, new FibonacciCounter(1).decrementedBy1().getFibonacciNumber());
    assertEquals(1, new FibonacciCounter(2).decrementedBy1().getFibonacciNumber());

    int fibValue = 1;
    int prevFibValue = 0;
    for (int test = 2; test < 47; test++) {
      fib = new FibonacciCounter(test + 1);

      int temp = fibValue;
      fibValue = fibValue + prevFibValue;
      prevFibValue = temp;

      assertEquals("Fail for a counter of " + test, fibValue,
          fib.decrementedBy1().getFibonacciNumber());
    }
  }
  
  @Test
  public void testGetCount() {
    FibonacciCounter fib;
    for (int test = 0; test < 100; test++) {
      fib = new FibonacciCounter(test);

      assertEquals(test, fib.getCount());
    }
  }
  
  @Test
  public void testGetCountAndFib() {
    FibonacciCounter fib;
  }

}
